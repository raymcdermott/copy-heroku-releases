#! /usr/bin/env node

'use strict';

/*
 * copy-heroku-releases.js
 * https://github.com/raymcdermott/copy-heroku-releases.js
 *
 * Copyright (c) 2014 Ray McDermott
 * Licensed under the MIT license.
 */

// Assert pre-requisites
var assert = require('assert');

assert(process.env.HEROKU_API_TOKEN, "You must have HEROKU_API_TOKEN set in your environment");
assert(process.env.TARGET_APPS, "You must have TARGET_APPS set in your environment");

// Functional requires
var fs = require('fs');
var lazy = require('lazy.js');
var restify = require('restify');
var Heroku = require('heroku-client'),
    heroku = new Heroku({ token: process.env.HEROKU_API_TOKEN });

// Command line options
assert((process.argv.length >= 2), "You must specify appname [optional-release-number]");
var app = process.argv[2];
var requestedRelease = parseInt(process.argv[3]);

// Helper function to DRY the code
function processRelease(release, releaseNumber) {
    if (!release) {
        return "Cannot find release " + releaseNumber;
    } else if (!release.slug) {
        return "Cannot find a slug for release " + releaseNumber;
    } else {
        return release.slug.id;
    }
}

// Do the work
function doCopy(appName, slugId) {
    heroku.post('/apps/' + appName + '/releases/', { 'slug': slugId }, function (err, responseBody) {
        assert.ifError(err, "Could not copy slug " + slugId + " to app " + appName);

        console.log("Copied slug " + slugId + " to app " + appName + " [created new app version " + responseBody.version + "]");
    });
}

// Copy the slug to each of the target apps
function copySlug(slugId) {
    var targetApps = process.env.TARGET_APPS.split(" ");

    for (var i = 0; i < targetApps.length; i++) {
        doCopy(targetApps[i], slugId);
    }
}

// fetch the slug ids and execute the copying
function processSlug(appName, requestedRelease) {
    heroku.get('/apps/' + appName + '/releases/', function (err, responseBody) {
        assert.ifError(err, "Could not get the releases from Heroku");

        var slugId = null;

        if (requestedRelease) {
            var someRelease = lazy(responseBody).find(function (release) { return release.version === requestedRelease; });

            slugId = processRelease(someRelease, requestedRelease);

        } else {
            // By default use the latest release ... the response is not ordered
            var latestRelease = lazy(responseBody).sortBy(function (release) { return release.version; }).last();

            slugId = processRelease(latestRelease, "[ most recent ]");
        }

        copySlug(slugId);
    });
}

// Entry point
processSlug(app, requestedRelease);